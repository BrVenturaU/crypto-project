// <auto-generated />
using System;
using CryptoProjectApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoProjectApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoProjectApi.Entity.PasswordLogWithSalt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordLogsWithSalt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = new byte[] { 141, 162, 42, 186, 115, 164, 107, 8, 191, 19, 170, 121, 75, 26, 23, 212, 232, 199, 108, 166, 220, 22, 27, 181, 58, 130, 211, 238, 35, 198, 47, 189, 69, 75, 210, 203, 18, 57, 200, 164, 93, 184, 46, 247, 215, 39, 84, 210, 183, 192, 184, 89, 230, 67, 40, 36, 179, 69, 90, 203, 78, 63, 115, 207 },
                            Salt = new byte[] { 230, 192, 148, 139, 35, 239, 178, 110, 23, 107, 155, 77, 59, 210, 194, 224, 115, 55, 47, 86, 186, 127, 121, 108, 30, 53, 15, 224, 148, 176, 49, 74, 122, 137, 205, 80, 57, 239, 0, 235, 213, 128, 104, 253, 170, 127, 16, 60, 115, 243, 124, 156, 233, 191, 215, 193, 31, 108, 21, 147, 172, 13, 78, 221, 203, 24, 205, 159, 195, 213, 180, 195, 179, 206, 240, 253, 183, 22, 201, 102, 201, 220, 91, 106, 16, 136, 75, 247, 220, 117, 246, 219, 0, 219, 182, 188, 201, 139, 72, 159, 114, 232, 32, 235, 51, 180, 140, 153, 108, 179, 203, 111, 106, 77, 162, 120, 62, 85, 200, 239, 6, 144, 80, 191, 69, 132, 125, 67 }
                        },
                        new
                        {
                            Id = 2,
                            Hash = new byte[] { 234, 237, 187, 96, 50, 13, 73, 27, 118, 22, 89, 1, 158, 2, 210, 239, 176, 139, 59, 96, 71, 122, 60, 136, 139, 132, 65, 180, 105, 255, 10, 136, 106, 1, 25, 236, 214, 31, 94, 253, 78, 18, 7, 18, 47, 215, 246, 103, 167, 78, 155, 4, 182, 168, 199, 35, 199, 98, 106, 17, 96, 91, 205, 73 },
                            Salt = new byte[] { 37, 172, 186, 36, 41, 134, 120, 65, 94, 193, 163, 120, 144, 32, 92, 126, 50, 174, 171, 254, 31, 104, 7, 127, 238, 75, 210, 205, 125, 224, 147, 173, 56, 8, 127, 101, 19, 188, 152, 142, 215, 44, 161, 164, 182, 33, 140, 177, 212, 21, 33, 96, 70, 57, 165, 246, 69, 41, 171, 232, 107, 225, 88, 37, 69, 97, 17, 86, 216, 36, 197, 63, 222, 206, 73, 102, 160, 247, 29, 122, 161, 124, 249, 150, 98, 77, 210, 133, 214, 172, 80, 70, 109, 47, 239, 212, 228, 183, 95, 115, 115, 150, 245, 249, 53, 196, 172, 130, 133, 241, 6, 233, 6, 99, 23, 61, 238, 9, 194, 181, 197, 156, 50, 10, 50, 182, 254, 207 }
                        },
                        new
                        {
                            Id = 3,
                            Hash = new byte[] { 99, 93, 114, 117, 131, 11, 70, 153, 209, 250, 153, 172, 95, 124, 238, 72, 250, 53, 43, 234, 180, 247, 3, 24, 18, 23, 139, 98, 236, 142, 167, 44, 225, 193, 80, 208, 216, 23, 187, 192, 204, 223, 69, 30, 43, 253, 23, 105, 29, 47, 42, 95, 242, 245, 142, 216, 111, 252, 195, 30, 163, 155, 51, 126 },
                            Salt = new byte[] { 127, 18, 59, 61, 83, 254, 148, 164, 0, 39, 179, 146, 84, 91, 217, 163, 28, 121, 244, 100, 56, 134, 48, 148, 2, 255, 203, 31, 236, 48, 0, 56, 105, 58, 213, 55, 213, 157, 48, 79, 200, 170, 98, 92, 186, 122, 124, 9, 73, 88, 74, 25, 240, 76, 129, 173, 62, 161, 103, 46, 13, 163, 241, 72, 68, 57, 35, 158, 199, 56, 77, 90, 148, 44, 224, 105, 71, 180, 102, 1, 78, 195, 145, 34, 117, 226, 122, 211, 82, 23, 253, 139, 234, 126, 147, 46, 48, 174, 86, 192, 177, 18, 233, 146, 204, 7, 143, 74, 152, 71, 162, 219, 232, 237, 17, 85, 116, 7, 30, 113, 236, 43, 253, 193, 236, 24, 202, 236 }
                        },
                        new
                        {
                            Id = 4,
                            Hash = new byte[] { 136, 55, 89, 106, 207, 113, 129, 35, 6, 107, 34, 99, 221, 165, 170, 187, 160, 224, 245, 236, 138, 142, 246, 70, 156, 115, 13, 116, 181, 107, 22, 106, 96, 153, 176, 12, 231, 110, 106, 30, 175, 1, 6, 253, 45, 204, 255, 188, 233, 196, 50, 14, 185, 109, 181, 199, 142, 233, 222, 208, 13, 39, 59, 154 },
                            Salt = new byte[] { 121, 212, 201, 197, 54, 216, 94, 49, 112, 248, 86, 147, 90, 102, 128, 186, 240, 36, 4, 233, 186, 178, 219, 56, 139, 60, 53, 3, 25, 126, 6, 95, 176, 106, 48, 167, 22, 6, 192, 230, 194, 57, 16, 164, 120, 152, 210, 160, 125, 148, 1, 222, 167, 114, 124, 174, 6, 130, 229, 181, 195, 6, 220, 10, 228, 6, 58, 88, 156, 10, 206, 175, 238, 120, 148, 180, 254, 203, 36, 25, 1, 188, 153, 2, 220, 85, 214, 208, 195, 84, 253, 135, 35, 211, 251, 224, 37, 224, 177, 255, 106, 79, 19, 105, 167, 137, 245, 17, 33, 166, 151, 163, 170, 235, 239, 39, 22, 65, 66, 147, 137, 141, 164, 247, 3, 167, 179, 111 }
                        },
                        new
                        {
                            Id = 5,
                            Hash = new byte[] { 118, 32, 20, 218, 9, 189, 196, 58, 0, 187, 250, 22, 194, 88, 229, 101, 127, 78, 195, 138, 18, 33, 69, 156, 222, 194, 35, 23, 93, 253, 246, 99, 163, 152, 131, 120, 186, 221, 109, 231, 99, 236, 116, 201, 54, 222, 223, 160, 61, 68, 100, 251, 37, 160, 159, 184, 36, 70, 237, 249, 40, 180, 68, 133 },
                            Salt = new byte[] { 17, 193, 29, 27, 249, 185, 92, 192, 105, 207, 110, 217, 103, 14, 73, 205, 154, 158, 69, 143, 255, 204, 34, 90, 131, 201, 85, 4, 9, 84, 27, 107, 132, 106, 184, 103, 188, 47, 159, 184, 200, 119, 24, 127, 212, 29, 168, 157, 27, 40, 200, 65, 211, 218, 112, 231, 5, 57, 99, 214, 254, 87, 68, 83, 153, 159, 236, 11, 186, 8, 81, 26, 190, 188, 26, 107, 237, 149, 44, 169, 122, 188, 201, 192, 150, 155, 41, 233, 71, 155, 197, 156, 214, 92, 65, 78, 12, 48, 11, 217, 40, 237, 76, 108, 90, 167, 122, 48, 205, 187, 211, 65, 2, 34, 204, 147, 77, 142, 156, 155, 53, 239, 218, 50, 235, 125, 135, 21 }
                        });
                });

            modelBuilder.Entity("CryptoProjectApi.Entity.PasswordLogWithoutSalt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordLogsWithoutSalt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = new byte[] { 107, 121, 131, 240, 137, 193, 158, 119 }
                        },
                        new
                        {
                            Id = 2,
                            Hash = new byte[] { 107, 121, 131, 240, 137, 193, 158, 119 }
                        },
                        new
                        {
                            Id = 3,
                            Hash = new byte[] { 107, 121, 131, 240, 137, 193, 158, 119 }
                        },
                        new
                        {
                            Id = 4,
                            Hash = new byte[] { 107, 121, 131, 240, 137, 193, 158, 119 }
                        },
                        new
                        {
                            Id = 5,
                            Hash = new byte[] { 107, 121, 131, 240, 137, 193, 158, 119 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
